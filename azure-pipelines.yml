# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- dev

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  
steps:
- task: NodeTool@0
  displayName: 'Use Node.js v14.15.0'
  inputs:
    versionSpec: v14.15.0

- script: |
    npm install -g @angular/cli
    npm install
    ng build --prod
  workingDirectory: '$(Build.SourcesDirectory)\MatthewAllenXYZ\MatthewAllenUI'
  displayName: 'npm install and build'

- script: tree
  workingDirectory: '$(Build.SourcesDirectory)'
  displayName: 'SourcesDirectory Tree'



- task: CopyFiles@2
  displayName: 'Copying Dist to ArtifactStagingDirectory $(Build.SourcesDirectory)\MatthewAllenXYZ\'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\MatthewAllenXYZ\MatthewAllenUI\dist'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

# - task: CopyFiles@2
#   inputs:
#     contents: '$(Build.SourcesDirectory)/MatthewAllenUI/dist/'
#     targetFolder: $(Build.ArtifactStagingDirectory)
#   displayName: 'Copy UI to $(Build.ArtifactStagingDirectory)'
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.SourcesDirectory)/MatthewAllenUI/dist/'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'
#   displayName: 'Publish UI Artifact'
  

# - script: dotnet build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
#   workingDirectory: '$(Build.SourcesDirectory)/MatthewAllenServices'
#   displayName: 'dotnet build $(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: publish
#     publishWebProjects: True
#     zipAfterPublish: True
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#   displayName: 'dotnet publish $(buildConfiguration)'

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  displayName: 'Publish UI Artifact'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'MatthewAllenUIArtifact'